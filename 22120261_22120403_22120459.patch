diff --git a/Makefile b/Makefile
index 24e6309..74e454f 100644
--- a/Makefile
+++ b/Makefile
@@ -194,10 +194,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-	$U/_pingpong\
-	$U/_primes\
-	$U/_find\
-	$U/_xargs\
+
 
 
 
diff --git a/user/find.c b/user/find.c
deleted file mode 100644
index f3219e1..0000000
--- a/user/find.c
+++ /dev/null
@@ -1,83 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/fs.h"
-#include "kernel/fcntl.h"
-
-// Get file name from args
-char* extract_filename(char *full_path)
-{
-    char *filename;
-    for (filename = full_path + strlen(full_path); filename >= full_path && *filename != '/'; filename--)
-        ;
-    return filename + 1;
-}
-
-// Search target
-void recursive_search(char *directory_path, char *target_filename) {
-    char path_buffer[512], *path_end;
-    int dir_fd;
-    struct dirent dir_entry;
-    struct stat path_stat;
-
-    // Check target
-    if (strcmp(extract_filename(directory_path), target_filename) == 0) {
-        printf("%s\n", directory_path);
-    }
-
-    // Open folder
-    if ((dir_fd = open(directory_path, O_RDONLY)) < 0) {
-        fprintf(2, "recursive_search: cannot open [%s], fd=%d\n", directory_path, dir_fd);
-        return;
-    }
-
-    // Get path
-    if (fstat(dir_fd, &path_stat) < 0) {
-        fprintf(2, "recursive_search: cannot stat %s\n", directory_path);
-        close(dir_fd);
-        return;
-    }
-
-    // Check folder
-    if (path_stat.type != T_DIR) {
-        close(dir_fd);
-        return;
-    }
-
-    // Check path
-    if (strlen(directory_path) + 1 + DIRSIZ + 1 > sizeof(path_buffer)) {
-        printf("recursive_search: path too long\n");
-        close(dir_fd);
-        return;
-    }
-    strcpy(path_buffer, directory_path);
-    path_end = path_buffer + strlen(path_buffer);
-    *path_end++ = '/';
-    
-    // Read each folder
-    while (read(dir_fd, &dir_entry, sizeof(dir_entry)) == sizeof(dir_entry)) {
-        if (dir_entry.inum == 0)
-            continue;
-        
-        memmove(path_end, dir_entry.name, DIRSIZ);
-        path_end[DIRSIZ] = 0;
-        
-        // Ignore folder "." and ".."
-        if (strcmp(dir_entry.name, ".") == 0 || strcmp(dir_entry.name, "..") == 0)
-            continue;
-        
-        // Recursive search
-        recursive_search(path_buffer, target_filename);
-    }
-    close(dir_fd);
-}
-
-int main(int argc, char *argv[]) {
-    if (argc < 3) {
-        fprintf(2, "usage: recursive_search <path> <filename>\n");
-        exit(1);
-    }
-
-    recursive_search(argv[1], argv[2]);
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/pingpong.c b/user/pingpong.c
deleted file mode 100644
index f6bd416..0000000
--- a/user/pingpong.c
+++ /dev/null
@@ -1,23 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-
-void main(){
-    int p[2];  
-    pipe(p);   
-
-    if (fork() == 0) {  
-        char buf[1];
-        read(p[0], buf, 1);  
-        printf("%d: received ping\n", getpid());  
-        write(p[1], buf, 1); 
-        exit(0);
-    } else {  
-        char buf[1] = {'p'};
-        write(p[1], buf, 1);  
-        wait(0);             
-        read(p[0], buf, 1);  
-        printf("%d: received pong\n", getpid());  
-        exit(0);
-    }
-}
\ No newline at end of file
diff --git a/user/primes.c b/user/primes.c
deleted file mode 100644
index 3d411cc..0000000
--- a/user/primes.c
+++ /dev/null
@@ -1,64 +0,0 @@
-#include "kernel/types.h"
-#include "user/user.h"
-
-void primes() {
-    int p[2];
-    int num;
-    if(read(0, (void*)&num, sizeof(num)) <= 0)
-        return;
-    
-    printf("prime %d\n", num);
-    if(pipe(p) < 0) {
-        fprintf(2, "Error: cannot create pipe");
-        exit(1);
-    }
-    int pid = fork();
-    if(pid == 0) {
-        close(0);
-        dup(p[0]);
-        close(p[0]);
-        close(p[1]);
-        primes();
-    } else {
-        close(1);
-        dup(p[1]);
-        close(p[0]);
-        close(p[1]);
-        int tmp = 0;
-        while(read(0, (void*)&tmp, sizeof(tmp))) {
-            if(tmp % num != 0) {
-                write(1, (void*)&tmp, sizeof(tmp));
-            }
-        }
-        close(1);
-        wait(&pid);
-    }   
-}
-
-int main(int argc, char* argv[]) {
-    int p[2];
-    if(pipe(p) < 0) {
-        fprintf(2, "Error: cannot create pipe");
-        exit(1);
-    }
-
-    int pid = fork();
-    if(pid == 0) {
-        close(0);
-        dup(p[0]);
-        close(p[0]);
-        close(p[1]);
-        primes();
-    } else {
-        close(1);
-        dup(p[1]);
-        close(p[0]);
-        close(p[1]);
-        for(int i = 2; i <= 280; i++) {
-            write(1, (void*)&i, sizeof(i));
-        }
-        close(1);
-        wait(&pid);
-    }
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/xargs.c b/user/xargs.c
deleted file mode 100644
index 56cf001..0000000
--- a/user/xargs.c
+++ /dev/null
@@ -1,68 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/param.h"
-
-int main(int argc, char *argv[]) {
-    char buf[512];
-    char *args[MAXARG];
-    int i, j, n;
-
-    if (argc < 2) {
-        fprintf(2, "usage: xargs [-n count] command ...\n");
-        exit(1);
-    }
-
-    int n_flag = 0;  
-    int count = 0;   // Num of args
-    int base_args = argc - 1;
-
-    // Check -n
-    if (strcmp(argv[1], "-n") == 0) {
-        n_flag = 1;
-        count = atoi(argv[2]);
-        base_args = argc - 3; // Update base args
-    }
-
-    // copy base command to xargs
-    for (i = 0; i < base_args; i++) {
-        args[i] = argv[n_flag ? i + 3 : i + 1];
-    }
-
-    while ((n = read(0, buf, sizeof(buf))) > 0) {
-        int len = 0;
-        int num_args = base_args; 
-        for (j = 0; j < n; j++) {
-            if (buf[j] == ' ' || buf[j] == '\n') {
-                buf[j] = 0; // End of str
-                args[num_args++] = &buf[len]; // Add new args
-                len = j + 1; 
-                
-
-                if (n_flag && (num_args - base_args) == count) {
-                    args[num_args] = 0; 
-                    if (fork() == 0) {
-                        exec(args[0], args); 
-                        fprintf(2, "exec %s failed\n", args[0]); 
-                        exit(1);
-                    }
-                    wait(0);
-                    num_args = base_args; // Reset 
-                }
-            }
-        }
-
-        
-        if (num_args > base_args) {
-            args[num_args] = 0; // End list args
-            if (fork() == 0) {
-                exec(args[0], args); 
-                fprintf(2, "exec %s failed\n", args[0]);
-                exit(1);
-            }
-            wait(0);
-        }
-    }
-
-    exit(0);
-}
\ No newline at end of file

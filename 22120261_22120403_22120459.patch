diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..2bf588b
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "compare": "cpp"
+    }
+}
\ No newline at end of file
diff --git a/22120261_22120403_22120459.patch b/22120261_22120403_22120459.patch
new file mode 100644
index 0000000..f3f413b
--- /dev/null
+++ b/22120261_22120403_22120459.patch
@@ -0,0 +1,282 @@
+diff --git a/Makefile b/Makefile
+index 24e6309..74e454f 100644
+--- a/Makefile
++++ b/Makefile
+@@ -194,10 +194,7 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
+-	$U/_pingpong\
+-	$U/_primes\
+-	$U/_find\
+-	$U/_xargs\
++
+ 
+ 
+ 
+diff --git a/user/find.c b/user/find.c
+deleted file mode 100644
+index f3219e1..0000000
+--- a/user/find.c
++++ /dev/null
+@@ -1,83 +0,0 @@
+-#include "kernel/types.h"
+-#include "kernel/stat.h"
+-#include "user/user.h"
+-#include "kernel/fs.h"
+-#include "kernel/fcntl.h"
+-
+-// Get file name from args
+-char* extract_filename(char *full_path)
+-{
+-    char *filename;
+-    for (filename = full_path + strlen(full_path); filename >= full_path && *filename != '/'; filename--)
+-        ;
+-    return filename + 1;
+-}
+-
+-// Search target
+-void recursive_search(char *directory_path, char *target_filename) {
+-    char path_buffer[512], *path_end;
+-    int dir_fd;
+-    struct dirent dir_entry;
+-    struct stat path_stat;
+-
+-    // Check target
+-    if (strcmp(extract_filename(directory_path), target_filename) == 0) {
+-        printf("%s\n", directory_path);
+-    }
+-
+-    // Open folder
+-    if ((dir_fd = open(directory_path, O_RDONLY)) < 0) {
+-        fprintf(2, "recursive_search: cannot open [%s], fd=%d\n", directory_path, dir_fd);
+-        return;
+-    }
+-
+-    // Get path
+-    if (fstat(dir_fd, &path_stat) < 0) {
+-        fprintf(2, "recursive_search: cannot stat %s\n", directory_path);
+-        close(dir_fd);
+-        return;
+-    }
+-
+-    // Check folder
+-    if (path_stat.type != T_DIR) {
+-        close(dir_fd);
+-        return;
+-    }
+-
+-    // Check path
+-    if (strlen(directory_path) + 1 + DIRSIZ + 1 > sizeof(path_buffer)) {
+-        printf("recursive_search: path too long\n");
+-        close(dir_fd);
+-        return;
+-    }
+-    strcpy(path_buffer, directory_path);
+-    path_end = path_buffer + strlen(path_buffer);
+-    *path_end++ = '/';
+-    
+-    // Read each folder
+-    while (read(dir_fd, &dir_entry, sizeof(dir_entry)) == sizeof(dir_entry)) {
+-        if (dir_entry.inum == 0)
+-            continue;
+-        
+-        memmove(path_end, dir_entry.name, DIRSIZ);
+-        path_end[DIRSIZ] = 0;
+-        
+-        // Ignore folder "." and ".."
+-        if (strcmp(dir_entry.name, ".") == 0 || strcmp(dir_entry.name, "..") == 0)
+-            continue;
+-        
+-        // Recursive search
+-        recursive_search(path_buffer, target_filename);
+-    }
+-    close(dir_fd);
+-}
+-
+-int main(int argc, char *argv[]) {
+-    if (argc < 3) {
+-        fprintf(2, "usage: recursive_search <path> <filename>\n");
+-        exit(1);
+-    }
+-
+-    recursive_search(argv[1], argv[2]);
+-    exit(0);
+-}
+\ No newline at end of file
+diff --git a/user/pingpong.c b/user/pingpong.c
+deleted file mode 100644
+index f6bd416..0000000
+--- a/user/pingpong.c
++++ /dev/null
+@@ -1,23 +0,0 @@
+-#include "kernel/types.h"
+-#include "kernel/stat.h"
+-#include "user/user.h"
+-
+-void main(){
+-    int p[2];  
+-    pipe(p);   
+-
+-    if (fork() == 0) {  
+-        char buf[1];
+-        read(p[0], buf, 1);  
+-        printf("%d: received ping\n", getpid());  
+-        write(p[1], buf, 1); 
+-        exit(0);
+-    } else {  
+-        char buf[1] = {'p'};
+-        write(p[1], buf, 1);  
+-        wait(0);             
+-        read(p[0], buf, 1);  
+-        printf("%d: received pong\n", getpid());  
+-        exit(0);
+-    }
+-}
+\ No newline at end of file
+diff --git a/user/primes.c b/user/primes.c
+deleted file mode 100644
+index 3d411cc..0000000
+--- a/user/primes.c
++++ /dev/null
+@@ -1,64 +0,0 @@
+-#include "kernel/types.h"
+-#include "user/user.h"
+-
+-void primes() {
+-    int p[2];
+-    int num;
+-    if(read(0, (void*)&num, sizeof(num)) <= 0)
+-        return;
+-    
+-    printf("prime %d\n", num);
+-    if(pipe(p) < 0) {
+-        fprintf(2, "Error: cannot create pipe");
+-        exit(1);
+-    }
+-    int pid = fork();
+-    if(pid == 0) {
+-        close(0);
+-        dup(p[0]);
+-        close(p[0]);
+-        close(p[1]);
+-        primes();
+-    } else {
+-        close(1);
+-        dup(p[1]);
+-        close(p[0]);
+-        close(p[1]);
+-        int tmp = 0;
+-        while(read(0, (void*)&tmp, sizeof(tmp))) {
+-            if(tmp % num != 0) {
+-                write(1, (void*)&tmp, sizeof(tmp));
+-            }
+-        }
+-        close(1);
+-        wait(&pid);
+-    }   
+-}
+-
+-int main(int argc, char* argv[]) {
+-    int p[2];
+-    if(pipe(p) < 0) {
+-        fprintf(2, "Error: cannot create pipe");
+-        exit(1);
+-    }
+-
+-    int pid = fork();
+-    if(pid == 0) {
+-        close(0);
+-        dup(p[0]);
+-        close(p[0]);
+-        close(p[1]);
+-        primes();
+-    } else {
+-        close(1);
+-        dup(p[1]);
+-        close(p[0]);
+-        close(p[1]);
+-        for(int i = 2; i <= 280; i++) {
+-            write(1, (void*)&i, sizeof(i));
+-        }
+-        close(1);
+-        wait(&pid);
+-    }
+-    exit(0);
+-}
+\ No newline at end of file
+diff --git a/user/xargs.c b/user/xargs.c
+deleted file mode 100644
+index 56cf001..0000000
+--- a/user/xargs.c
++++ /dev/null
+@@ -1,68 +0,0 @@
+-#include "kernel/types.h"
+-#include "kernel/stat.h"
+-#include "user/user.h"
+-#include "kernel/param.h"
+-
+-int main(int argc, char *argv[]) {
+-    char buf[512];
+-    char *args[MAXARG];
+-    int i, j, n;
+-
+-    if (argc < 2) {
+-        fprintf(2, "usage: xargs [-n count] command ...\n");
+-        exit(1);
+-    }
+-
+-    int n_flag = 0;  
+-    int count = 0;   // Num of args
+-    int base_args = argc - 1;
+-
+-    // Check -n
+-    if (strcmp(argv[1], "-n") == 0) {
+-        n_flag = 1;
+-        count = atoi(argv[2]);
+-        base_args = argc - 3; // Update base args
+-    }
+-
+-    // copy base command to xargs
+-    for (i = 0; i < base_args; i++) {
+-        args[i] = argv[n_flag ? i + 3 : i + 1];
+-    }
+-
+-    while ((n = read(0, buf, sizeof(buf))) > 0) {
+-        int len = 0;
+-        int num_args = base_args; 
+-        for (j = 0; j < n; j++) {
+-            if (buf[j] == ' ' || buf[j] == '\n') {
+-                buf[j] = 0; // End of str
+-                args[num_args++] = &buf[len]; // Add new args
+-                len = j + 1; 
+-                
+-
+-                if (n_flag && (num_args - base_args) == count) {
+-                    args[num_args] = 0; 
+-                    if (fork() == 0) {
+-                        exec(args[0], args); 
+-                        fprintf(2, "exec %s failed\n", args[0]); 
+-                        exit(1);
+-                    }
+-                    wait(0);
+-                    num_args = base_args; // Reset 
+-                }
+-            }
+-        }
+-
+-        
+-        if (num_args > base_args) {
+-            args[num_args] = 0; // End list args
+-            if (fork() == 0) {
+-                exec(args[0], args); 
+-                fprintf(2, "exec %s failed\n", args[0]);
+-                exit(1);
+-            }
+-            wait(0);
+-        }
+-    }
+-
+-    exit(0);
+-}
+\ No newline at end of file
diff --git a/Makefile b/Makefile
index 74e454f..2480f60 100644
--- a/Makefile
+++ b/Makefile
@@ -194,7 +194,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..762ae02 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          freemem(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          getnproc(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 5247b91..f89af70 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -91,3 +91,16 @@ kalloc(void)
   return (void*)r;
 }
 
+uint64 
+freemem(void){
+  struct run* r;
+  int byteCount = 0;
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while(r) {
+    r = r->next;
+    byteCount++;
+  }
+  release(&kmem.lock);
+  return byteCount * PGSIZE;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..6d67d8e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -299,6 +299,7 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+  np->tracemask = p->tracemask;
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -693,3 +694,15 @@ procdump(void)
     printf("\n");
   }
 }
+
+uint64
+getnproc(void){
+  int procCount = 0;
+  struct proc* p;
+  for (p = proc; p < &proc[NPROC]; p++){
+    if (p->state != UNUSED){
+      procCount++;
+    }
+  }
+  return procCount;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..89b5eb0 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tracemask;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..770e033 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,34 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+char *syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
 };
 
 void
@@ -136,12 +166,13 @@ syscall(void)
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if (p->tracemask >> num){
+      printf("%d: syscall %s -> %lu\n", p->pid, syscallnames[num], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0dfedc7 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..5f30025 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,24 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_trace(void) {
+  argint(0, &myproc()->tracemask);
+  return 0;
+}
+
+uint64
+sys_sysinfo(void){
+  uint64 addr;
+  struct sysinfo info;
+  struct proc* p = myproc();
+  argaddr(0, &addr);
+
+  info.freemem = freemem();
+  info.nproc = getnproc();
+
+  if (copyout(p->pagetable, addr, (char*)&info, sizeof(info)) < 0){
+    return -1;
+  }
+  return 0;
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..d7080de 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,10 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+int trace(int);
+struct sysinfo;
+int sysinfo(struct sysinfo *);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..353a1f8 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
\ No newline at end of file
